<?php

declare(strict_types = 1);

use BrowscapPHP\Browscap;
use BrowserDetector\DetectorFactory;
use DeviceDetector\Cache\PSR16Bridge;
use DeviceDetector\DeviceDetector;
use League\Flysystem\Filesystem;
use League\Flysystem\Local\LocalFilesystemAdapter;
use MatthiasMullie\Scrapbook\Adapters\Flysystem;
use MatthiasMullie\Scrapbook\Psr16\SimpleCache;
use MatthiasMullie\Scrapbook\Psr6\Pool;
use Psr\Log\NullLogger;
use UserAgentParserComparison\Provider;

/*
 * Browscap
 */
$browscapAdapter = new LocalFilesystemAdapter('data/cache/.tmp/browscap/standard');
$browscapCache   = new SimpleCache(
    new Flysystem(
        new Filesystem($browscapAdapter),
    ),
);

$logger = new NullLogger();

$browscapProviderStandard = new Provider\BrowscapPhp(
    new Browscap($browscapCache, $logger),
);

/*
 * BrowscapLite
 */
$browscapLiteAdapter = new LocalFilesystemAdapter('data/cache/.tmp/browscap/lite');
$browscapLiteCache   = new SimpleCache(
    new Flysystem(
        new Filesystem($browscapLiteAdapter),
    ),
);

$browscapProviderLite = new Provider\BrowscapLite(
    new Browscap($browscapLiteCache, $logger),
);

/*
 * BrowscapFull
 */
$browscapFullAdapter = new LocalFilesystemAdapter('data/cache/.tmp/browscap/full');
$browscapFullCache   = new SimpleCache(
    new Flysystem(
        new Filesystem($browscapFullAdapter),
    ),
);

$browscapProviderFull = new Provider\BrowscapFull(
    new Browscap($browscapFullCache, $logger),
);

/*
 * Matomo
 */
$matamoAdapter = new LocalFilesystemAdapter('data/cache/.tmp/matomo');
$matamoCache   = new SimpleCache(
    new Flysystem(
        new Filesystem($matamoAdapter),
    ),
);

$matomoParser = new DeviceDetector();
$matomoParser->setCache(new PSR16Bridge($matamoCache));

$matomoProvider = new Provider\MatomoDeviceDetector($matomoParser);

/*
 * BrowserDetector
 */
$detectorAdapter = new LocalFilesystemAdapter('data/cache/.tmp/browser-detector');
$detectorCache   = new SimpleCache(
    new Flysystem(
        new Filesystem($detectorAdapter),
    ),
);

$browserDetectorFactory  = new DetectorFactory($detectorCache, $logger);
$browserDetectorProvider = new Provider\BrowserDetector(
    $browserDetectorFactory(),
);

// $whichbrowserAdapter = new LocalFilesystemAdapter('data/cache/.tmp/whichbrowser');
// $whichbrowserCache   = new Pool(
//     new Flysystem(
//         new Filesystem($whichbrowserAdapter),
//     ),
// );

/*
 * HTTP
 */
// $handler = new CurlHandler();
// $stack = HandlerStack::create($handler);
//
// $client = new Client([
//    'handler' => $stack,
//    'timeout' => 3,
//
//    'curl' => [
//        CURLOPT_SSL_VERIFYHOST => false,
//        CURLOPT_SSL_VERIFYPEER => false
//    ]
// ]);
//
// $userAgentString = new Provider\Http\UserAgentStringCom($client);

return new Provider\Chain([
    $browscapProviderStandard,
    $browscapProviderLite,
    $browscapProviderFull,
    // new Provider\GetBrowser(),
    $matomoProvider,
    $browserDetectorProvider,
    new Provider\DonatjUAParser(),
    new Provider\UAParser(),
    // new Provider\WhichBrowser($whichbrowserCache),
    // new Provider\Woothee(new \Woothee\Classifier()),
    new Provider\Cbschuld(),
    new Provider\Wolfcast(),
    // new Provider\Endorphin(),
    new Provider\MobileDetect(),

    //     $userAgentString,
]);
